package tech.pegasys.teku.bls.impl.blst.swig;
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class blstJNI {
  public final static native void SecretKey_keygen__SWIG_0(long jarg1, SecretKey jarg1_, byte[] jarg2, String jarg4);
  public final static native void SecretKey_keygen__SWIG_1(long jarg1, SecretKey jarg1_, byte[] jarg2);
  public final static native void SecretKey_from_bendian(long jarg1, SecretKey jarg1_, byte[] jarg2);
  public final static native void SecretKey_from_lendian(long jarg1, SecretKey jarg1_, byte[] jarg2);
  public final static native byte[] SecretKey_to_bendian(long jarg1, SecretKey jarg1_);
  public final static native byte[] SecretKey_to_lendian(long jarg1, SecretKey jarg1_);
  public final static native long new_SecretKey();
  public final static native void delete_SecretKey(long jarg1);
  public final static native long new_P1_Affine__SWIG_0();
  public final static native long new_P1_Affine__SWIG_1(byte[] jarg1);
  public final static native long new_P1_Affine__SWIG_2(long jarg1, P1 jarg1_);
  public final static native long P1_Affine_dup(long jarg1, P1_Affine jarg1_);
  public final static native long P1_Affine_to_jacobian(long jarg1, P1_Affine jarg1_);
  public final static native byte[] P1_Affine_serialize(long jarg1, P1_Affine jarg1_);
  public final static native byte[] P1_Affine_compress(long jarg1, P1_Affine jarg1_);
  public final static native boolean P1_Affine_on_curve(long jarg1, P1_Affine jarg1_);
  public final static native boolean P1_Affine_in_group(long jarg1, P1_Affine jarg1_);
  public final static native boolean P1_Affine_is_inf(long jarg1, P1_Affine jarg1_);
  public final static native boolean P1_Affine_is_equal(long jarg1, P1_Affine jarg1_, long jarg2, P1_Affine jarg2_);
  public final static native int P1_Affine_core_verify__SWIG_0(long jarg1, P1_Affine jarg1_, long jarg2, P2_Affine jarg2_, boolean jarg3, byte[] jarg4, String jarg6, byte[] jarg7);
  public final static native int P1_Affine_core_verify__SWIG_2(long jarg1, P1_Affine jarg1_, long jarg2, P2_Affine jarg2_, boolean jarg3, byte[] jarg4, String jarg6);
  public final static native int P1_Affine_core_verify__SWIG_3(long jarg1, P1_Affine jarg1_, long jarg2, P2_Affine jarg2_, boolean jarg3, byte[] jarg4);
  public final static native long P1_Affine_generator();
  public final static native void delete_P1_Affine(long jarg1);
  public final static native long new_P1__SWIG_0();
  public final static native long new_P1__SWIG_1(long jarg1, SecretKey jarg1_);
  public final static native long new_P1__SWIG_2(byte[] jarg1);
  public final static native long new_P1__SWIG_3(long jarg1, P1_Affine jarg1_);
  public final static native long P1_dup(long jarg1, P1 jarg1_);
  public final static native long P1_to_affine(long jarg1, P1 jarg1_);
  public final static native byte[] P1_serialize(long jarg1, P1 jarg1_);
  public final static native byte[] P1_compress(long jarg1, P1 jarg1_);
  public final static native boolean P1_on_curve(long jarg1, P1 jarg1_);
  public final static native boolean P1_in_group(long jarg1, P1 jarg1_);
  public final static native boolean P1_is_inf(long jarg1, P1 jarg1_);
  public final static native boolean P1_is_equal(long jarg1, P1 jarg1_, long jarg2, P1 jarg2_);
  public final static native void P1_aggregate(long jarg1, P1 jarg1_, long jarg2, P1_Affine jarg2_);
  public final static native long P1_sign_with(long jarg1, P1 jarg1_, long jarg2, SecretKey jarg2_);
  public final static native long P1_hash_to__SWIG_0(long jarg1, P1 jarg1_, byte[] jarg2, String jarg4, byte[] jarg5);
  public final static native long P1_hash_to__SWIG_2(long jarg1, P1 jarg1_, byte[] jarg2, String jarg4);
  public final static native long P1_hash_to__SWIG_3(long jarg1, P1 jarg1_, byte[] jarg2);
  public final static native long P1_encode_to__SWIG_0(long jarg1, P1 jarg1_, byte[] jarg2, String jarg4, byte[] jarg5);
  public final static native long P1_encode_to__SWIG_2(long jarg1, P1 jarg1_, byte[] jarg2, String jarg4);
  public final static native long P1_encode_to__SWIG_3(long jarg1, P1 jarg1_, byte[] jarg2);
  public final static native long P1_mult(long jarg1, P1 jarg1_, byte[] jarg2);
  public final static native long P1_cneg(long jarg1, P1 jarg1_, boolean jarg2);
  public final static native long P1_neg(long jarg1, P1 jarg1_);
  public final static native long P1_add__SWIG_0(long jarg1, P1 jarg1_, long jarg2, P1 jarg2_);
  public final static native long P1_add__SWIG_1(long jarg1, P1 jarg1_, long jarg2, P1_Affine jarg2_);
  public final static native long P1_dbl(long jarg1, P1 jarg1_);
  public final static native long P1_generator();
  public final static native void delete_P1(long jarg1);
  public final static native long new_P2_Affine__SWIG_0();
  public final static native long new_P2_Affine__SWIG_1(byte[] jarg1);
  public final static native long new_P2_Affine__SWIG_2(long jarg1, P2 jarg1_);
  public final static native long P2_Affine_dup(long jarg1, P2_Affine jarg1_);
  public final static native long P2_Affine_to_jacobian(long jarg1, P2_Affine jarg1_);
  public final static native byte[] P2_Affine_serialize(long jarg1, P2_Affine jarg1_);
  public final static native byte[] P2_Affine_compress(long jarg1, P2_Affine jarg1_);
  public final static native boolean P2_Affine_on_curve(long jarg1, P2_Affine jarg1_);
  public final static native boolean P2_Affine_in_group(long jarg1, P2_Affine jarg1_);
  public final static native boolean P2_Affine_is_inf(long jarg1, P2_Affine jarg1_);
  public final static native boolean P2_Affine_is_equal(long jarg1, P2_Affine jarg1_, long jarg2, P2_Affine jarg2_);
  public final static native int P2_Affine_core_verify__SWIG_0(long jarg1, P2_Affine jarg1_, long jarg2, P1_Affine jarg2_, boolean jarg3, byte[] jarg4, String jarg6, byte[] jarg7);
  public final static native int P2_Affine_core_verify__SWIG_2(long jarg1, P2_Affine jarg1_, long jarg2, P1_Affine jarg2_, boolean jarg3, byte[] jarg4, String jarg6);
  public final static native int P2_Affine_core_verify__SWIG_3(long jarg1, P2_Affine jarg1_, long jarg2, P1_Affine jarg2_, boolean jarg3, byte[] jarg4);
  public final static native long P2_Affine_generator();
  public final static native void delete_P2_Affine(long jarg1);
  public final static native long new_P2__SWIG_0();
  public final static native long new_P2__SWIG_1(long jarg1, SecretKey jarg1_);
  public final static native long new_P2__SWIG_2(byte[] jarg1);
  public final static native long new_P2__SWIG_3(long jarg1, P2_Affine jarg1_);
  public final static native long P2_dup(long jarg1, P2 jarg1_);
  public final static native long P2_to_affine(long jarg1, P2 jarg1_);
  public final static native byte[] P2_serialize(long jarg1, P2 jarg1_);
  public final static native byte[] P2_compress(long jarg1, P2 jarg1_);
  public final static native boolean P2_on_curve(long jarg1, P2 jarg1_);
  public final static native boolean P2_in_group(long jarg1, P2 jarg1_);
  public final static native boolean P2_is_inf(long jarg1, P2 jarg1_);
  public final static native boolean P2_is_equal(long jarg1, P2 jarg1_, long jarg2, P2 jarg2_);
  public final static native void P2_aggregate(long jarg1, P2 jarg1_, long jarg2, P2_Affine jarg2_);
  public final static native long P2_sign_with(long jarg1, P2 jarg1_, long jarg2, SecretKey jarg2_);
  public final static native long P2_hash_to__SWIG_0(long jarg1, P2 jarg1_, byte[] jarg2, String jarg4, byte[] jarg5);
  public final static native long P2_hash_to__SWIG_2(long jarg1, P2 jarg1_, byte[] jarg2, String jarg4);
  public final static native long P2_hash_to__SWIG_3(long jarg1, P2 jarg1_, byte[] jarg2);
  public final static native long P2_encode_to__SWIG_0(long jarg1, P2 jarg1_, byte[] jarg2, String jarg4, byte[] jarg5);
  public final static native long P2_encode_to__SWIG_2(long jarg1, P2 jarg1_, byte[] jarg2, String jarg4);
  public final static native long P2_encode_to__SWIG_3(long jarg1, P2 jarg1_, byte[] jarg2);
  public final static native long P2_mult(long jarg1, P2 jarg1_, byte[] jarg2);
  public final static native long P2_cneg(long jarg1, P2 jarg1_, boolean jarg2);
  public final static native long P2_neg(long jarg1, P2 jarg1_);
  public final static native long P2_add__SWIG_0(long jarg1, P2 jarg1_, long jarg2, P2 jarg2_);
  public final static native long P2_add__SWIG_1(long jarg1, P2 jarg1_, long jarg2, P2_Affine jarg2_);
  public final static native long P2_dbl(long jarg1, P2 jarg1_);
  public final static native long P2_generator();
  public final static native void delete_P2(long jarg1);
  public final static native long G1();
  public final static native long G2();
  public final static native long new_PT__SWIG_0(long jarg1, P1_Affine jarg1_);
  public final static native long new_PT__SWIG_1(long jarg1, P2_Affine jarg1_);
  public final static native long new_PT__SWIG_2(long jarg1, P2_Affine jarg1_, long jarg2, P1_Affine jarg2_);
  public final static native long PT_dup(long jarg1, PT jarg1_);
  public final static native boolean PT_is_one(long jarg1, PT jarg1_);
  public final static native boolean PT_is_equal(long jarg1, PT jarg1_, long jarg2, PT jarg2_);
  public final static native long PT_sqr(long jarg1, PT jarg1_);
  public final static native long PT_mul(long jarg1, PT jarg1_, long jarg2, PT jarg2_);
  public final static native long PT_final_exp(long jarg1, PT jarg1_);
  public final static native void delete_PT(long jarg1);
  public final static native long new_Pairing__SWIG_0(boolean jarg1, byte[] jarg2);
  public final static native long new_Pairing__SWIG_1(boolean jarg1, String jarg2);
  public final static native void delete_Pairing(long jarg1);
  public final static native int Pairing_aggregate__SWIG_0(long jarg1, Pairing jarg1_, long jarg2, P1_Affine jarg2_, long jarg3, P2_Affine jarg3_, byte[] jarg4, byte[] jarg6);
  public final static native int Pairing_aggregate__SWIG_2(long jarg1, Pairing jarg1_, long jarg2, P1_Affine jarg2_, long jarg3, P2_Affine jarg3_, byte[] jarg4);
  public final static native int Pairing_aggregate__SWIG_3(long jarg1, Pairing jarg1_, long jarg2, P2_Affine jarg2_, long jarg3, P1_Affine jarg3_, byte[] jarg4, byte[] jarg6);
  public final static native int Pairing_aggregate__SWIG_5(long jarg1, Pairing jarg1_, long jarg2, P2_Affine jarg2_, long jarg3, P1_Affine jarg3_, byte[] jarg4);
  public final static native int Pairing_mul_n_aggregate__SWIG_0(long jarg1, Pairing jarg1_, long jarg2, P1_Affine jarg2_, long jarg3, P2_Affine jarg3_, byte[] jarg4, byte[] jarg6, byte[] jarg8);
  public final static native int Pairing_mul_n_aggregate__SWIG_2(long jarg1, Pairing jarg1_, long jarg2, P1_Affine jarg2_, long jarg3, P2_Affine jarg3_, byte[] jarg4, byte[] jarg6);
  public final static native int Pairing_mul_n_aggregate__SWIG_3(long jarg1, Pairing jarg1_, long jarg2, P2_Affine jarg2_, long jarg3, P1_Affine jarg3_, byte[] jarg4, byte[] jarg6, byte[] jarg8);
  public final static native int Pairing_mul_n_aggregate__SWIG_5(long jarg1, Pairing jarg1_, long jarg2, P2_Affine jarg2_, long jarg3, P1_Affine jarg3_, byte[] jarg4, byte[] jarg6);
  public final static native void Pairing_commit(long jarg1, Pairing jarg1_);
  public final static native int Pairing_merge(long jarg1, Pairing jarg1_, long jarg2, Pairing jarg2_);
  public final static native boolean Pairing_finalverify__SWIG_0(long jarg1, Pairing jarg1_, long jarg2, PT jarg2_);
  public final static native boolean Pairing_finalverify__SWIG_1(long jarg1, Pairing jarg1_);
  public final static native long BLS12_381_G1_get();
  public final static native long BLS12_381_NEG_G1_get();
  public final static native long BLS12_381_G2_get();
  public final static native long BLS12_381_NEG_G2_get();
}
