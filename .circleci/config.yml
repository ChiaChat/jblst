---
version: 2.1
executors:
  linux_executor: # 2cpu, 4G ram
    docker:
      - image: circleci/openjdk:11.0.4-jdk-stretch
    resource_class: medium
    working_directory: ~/project
    environment:
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2
  mac_os_executor: # 2cpu, 4G ram
    macos:
      xcode: "11.4.0"
    resource_class: medium
    working_directory: ~/project
    environment:
      GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2
      HOMEBREW_NO_AUTO_UPDATE: true

# besu_executor_med_windows: # 2cpu, 4G ram
#   machine:
#     image: "windows-server-2019-vs2019:stable"
#     resource_class: medium
#     shell: powershell.exe -ExecutionPolicy Bypass
#   working_directory: ~/project
#   environment:
#     GRADLE_OPTS: -Xmx2048m -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2


#notify:
#  webhooks:
#    - url: https://hyperledger-rocket-chat-hubot.herokuapp.com/hubot/circleci

commands:
  checkout_code:
    description: "Prepare - Checkout code"
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule init
            git submodule update

  prepare_linux:
    description: "Generate Linux shared lib"
    steps:
      - run:
          name: Generate linux shared lib
          command: |
            echo "Installing swig dependencies"
            sudo apt-get update
            sudo apt-get install -y autoconf libpcre3 libpcre3-dev bison flex

            echo "Installing swig"
            curl -L -O https://github.com/swig/swig/archive/v4.0.2.tar.gz
            tar -xzvf v4.0.2.tar.gz
            cd swig-4.0.2/
            sh autogen.sh
            ./configure
            make
            sudo make install

            cd ~/project
            sh blst/bindings/java/linux_run.me
            cp blst/bindings/java/libblst.so src/main/resources/x86_64/
            ./gradlew --no-daemon test
      - persist_to_workspace:
          root: ./src/main/resources/x86_64/
          paths:
            - libblst.so

  prepare_macos:
    description: "Generate macOS shared lib"
    steps:
      - run:
          name: Generate mac os shared lib
          command: |
            echo "Installing openjdk 11 for test execution"
            brew install openjdk@11
            sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

            echo "Installing swig"
            brew install swig@4.0

            sh blst/bindings/java/mac_run.me
            cp blst/bindings/java/libblst.dylib src/main/resources/x86_64/
            ./gradlew --no-daemon test
      - persist_to_workspace:
          root: ./src/main/resources/x86_64/
          paths:
            - libblst.dylib

jobs:
  native-build-linux-x86-64:
    executor: linux_executor
    environment:
      SKIP_GRADLE: true
    steps:
      - checkout_code
      - prepare_linux
  native-build-macos:
    executor: mac_os_executor
    environment:
      SKIP_GRADLE: true
    steps:
      - checkout_code
      - prepare_macos
  final-assembly:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: Create build
          command: |
            echo "Copying attached native libraries to resources"
            cp libblst.dylib ./src/main/resources/x86_64/
            cp libblst.so ./src/main/resources/x86_64/
            ./gradlew --no-daemon --parallel build
      - persist_to_workspace:
          root: .
          paths:
            - build/libs/*.jar
      - store_artifacts:
          name: Final jblst build artifacts
          path: build/libs
          destination: jblst_jars
          when: always
  publish:
    executor: linux_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: Publish
          command: |
            ./gradlew --no-daemon --parallel bintrayUpload
workflows:
  version: 2
  default:
    jobs:
      - native-build-linux-x86-64
      - native-build-macos
      - final-assembly:
          requires:
            - native-build-linux-x86-64
            - native-build-macos
      - publish:
          filters:
            branches:
              only:
                - master
                - /^release-.*/
          requires:
            - final-assembly
